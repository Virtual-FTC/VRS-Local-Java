var Inches, Degrees, Ticks;

// This function is executed when this Op Mode is selected.
async function runOpMode() {
  motor.setProperty([1], 'Direction', ["REVERSE"]);
  motor.setProperty([3], 'Direction', ["REVERSE"]);
  motor.setProperty([0, 1, 2, 3], 'Mode', ["STOP_AND_RESET_ENCODER", "STOP_AND_RESET_ENCODER", "STOP_AND_RESET_ENCODER", "STOP_AND_RESET_ENCODER"]);
  motor.setProperty([0, 1, 2, 3], 'TargetPositionTolerance', [50, 50, 50, 50]);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [0, 0, 0, 0]);
  motor.setProperty([0, 1, 2, 3], 'Mode', ["RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION"]);
  if (linearOpMode.opModeIsActive()) {
    motor.setProperty([7], 'Power', [1]);
    await Forward(65);
    await Strafe(-15);
    motor.setProperty([7], 'Power', [0]);
    await linearOpMode.sleep(250);
    motor.setProperty([6], 'Power', [1]);
    await Strafe(28);
    await Forward(-10);
    await linearOpMode.sleep(100);
    motor.setProperty([5], 'Power', [1]);
    await linearOpMode.sleep(3000);
    motor.setProperty([5], 'Power', [0]);
    await Forward(20);
  }
}

// Describe this function...
async function InchesToTicks(Inches) {
  Ticks = (Inches / (4 * Math.PI)) * 560;
  return Ticks;
}

// Describe this function...
async function Forward(Inches) {
  Ticks = await InchesToTicks(Inches);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [motor.getProperty(0, 'TargetPosition') + Ticks, motor.getProperty(1, 'TargetPosition') + Ticks, motor.getProperty(2, 'TargetPosition') + Ticks, motor.getProperty(3, 'TargetPosition') + Ticks]);
  motor.setProperty([0, 1, 2, 3], 'Power', [0.85, 0.85, 0.85, 0.85]);
  while (motor.isBusy(0) || motor.isBusy(1)) {
    await linearOpMode.sleep(1);
  }
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
}

// Describe this function...
async function Strafe(Inches) {
  Ticks = await InchesToTicks(Inches);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [motor.getProperty(0, 'TargetPosition') + Ticks, motor.getProperty(1, 'TargetPosition') - Ticks, motor.getProperty(2, 'TargetPosition') - Ticks, motor.getProperty(3, 'TargetPosition') + Ticks]);
  motor.setProperty([0, 1, 2, 3], 'Power', [0.85, 0.85, 0.85, 0.85]);
  while (motor.isBusy(0) || motor.isBusy(1)) {
    await linearOpMode.sleep(1);
  }
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
}

// Describe this function...
async function Rotate(Degrees) {
  motor.setProperty([0, 1, 2, 3], 'Mode', ["RUN_USING_ENCODER", "RUN_USING_ENCODER", "RUN_USING_ENCODER", "RUN_USING_ENCODER"]);
  motor.setProperty([0, 1, 2, 3], 'Power', [-0.85 * Math.min(Math.max(Degrees, -1), 1), 0.85 * Math.min(Math.max(Degrees, -1), 1), -0.85 * Math.min(Math.max(Degrees, -1), 1), 0.85 * Math.min(Math.max(Degrees, -1), 1)]);
  await linearOpMode.sleep((Degrees / 90) * 350);
  motor.setProperty([0, 1, 2, 3], 'Power', [0, 0, 0, 0]);
  motor.setProperty([0, 1, 2, 3], 'TargetPosition', [motor.getProperty(0, 'CurrentPosition'), motor.getProperty(1, 'CurrentPosition'), motor.getProperty(2, 'CurrentPosition'), motor.getProperty(3, 'CurrentPosition')]);
  motor.setProperty([0, 1, 2, 3], 'Mode', ["RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION", "RUN_TO_POSITION"]);
}


await runOpMode();